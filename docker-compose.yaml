networks:
  default:
    name: microservices-network
    external: true

services:
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
    image: user-service:latest
    container_name: user-service
    ports:
      - "8080:8080"
    depends_on:
      postgres-user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_KEY: ${INTERNAL_KEY}
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-user-db:5432/user_db"
      SPRING_DATASOURCE_USERNAME: "${POSTGRES_USER}"
      SPRING_DATASOURCE_PASSWORD: "${POSTGRES_PASSWORD}"
      SPRING_DATA_REDIS_HOST: "redis"
      SPRING_DATA_REDIS_PORT: "6379"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://user-service:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  postgres-user-db:
    image: postgres:17
    container_name: "postgres-user-db"
    restart: "no"
    ports:
      - "5432:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: user_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

  redis:
    image: redis:8.2.1
    container_name: "redis_cache"
    restart: "no"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

volumes:
  postgres_user_data:
  redis_data: